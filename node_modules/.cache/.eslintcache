[{"/home/almirfilho/learning/react/todo-app-react/src/index.js":"1","/home/almirfilho/learning/react/todo-app-react/src/App.js":"2","/home/almirfilho/learning/react/todo-app-react/src/components/Todo.js":"3","/home/almirfilho/learning/react/todo-app-react/src/components/Form.js":"4","/home/almirfilho/learning/react/todo-app-react/src/components/FilterButton.js":"5"},{"size":623,"mtime":1679194531313,"results":"6","hashOfConfig":"7"},{"size":1819,"mtime":1679195220652,"results":"8","hashOfConfig":"7"},{"size":1004,"mtime":1679195132522,"results":"9","hashOfConfig":"7"},{"size":999,"mtime":1679193403143,"results":"10","hashOfConfig":"7"},{"size":357,"mtime":1679185254523,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","suppressedMessages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1pvhhte",{"filePath":"15","messages":"16","suppressedMessages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},"/home/almirfilho/learning/react/todo-app-react/src/index.js",[],[],"/home/almirfilho/learning/react/todo-app-react/src/App.js",["29"],[],"import React, { useState } from \"react\";\nimport { nanoid } from \"nanoid\";\n\nimport Todo from \"./components/Todo\";\nimport Form from \"./components/Form\";\nimport FilterButton from \"./components/FilterButton\";\n\nfunction App(props) {\n  const [tasks, setTasks] = useState(props.tasks);\n\n  function addTask(name) {\n    const newTask = { id:`todo-${nanoid()}`, name, completed:false };\n    setTasks([...tasks, newTask]);\n    // console.log(tasks); //[!] Is not the updated version, it shows the tasks array before adding the new one\n  };\n\n  function toggleTaskCompleted(id) {\n    const updatedTasks = tasks.map((task) => {\n      if (id === task.id)\n      {\n        return {...task, completed:!task.completed};\n      }\n      return task;\n    })\n    setTasks(updatedTasks);\n  };\n\n  function deleteTask(id) {\n    const remainingTasks = tasks.filter((task) => id !== task.id);\n    setTasks(remainingTasks);\n  };\n  \n  const taskList = tasks?.map((task) => (\n    <Todo \n      id={task.id} \n      name={task.name} \n      completed={task.completed}\n      key={task.id}\n      toggleTaskCompleted={toggleTaskCompleted}\n      deleteTask={deleteTask}\n    />\n  ));\n\n  const tasksNoun = taskList.length === 1 ? \"task\" : \"tasks\";\n  const headingText = `${taskList.length} ${tasksNoun} remaining`;\n\n  return (\n    <div className=\"todoapp stack-large\">\n      <h1>TodoMatic</h1>\n      <Form onSubmit={addTask}/>\n      <div className=\"filters btn-group stack-exception\">\n        <FilterButton name=\"all\"/>\n        <FilterButton name=\"Active\"/>\n        <FilterButton name=\"Completed\"/>\n      </div>\n      <h2 id=\"list-heading\">{headingText}</h2>\n      <ul\n        role=\"list\"\n        className=\"todo-list stack-large stack-exception\"\n        aria-labelledby=\"list-heading\">\n          {taskList}\n        </ul>\n    </div>\n  );\n}\n\nexport default App;\n","/home/almirfilho/learning/react/todo-app-react/src/components/Todo.js",[],[],"/home/almirfilho/learning/react/todo-app-react/src/components/Form.js",[],[],[],"/home/almirfilho/learning/react/todo-app-react/src/components/FilterButton.js",[],[],{"ruleId":"30","severity":1,"message":"31","line":57,"column":7,"nodeType":"32","endLine":60,"endColumn":40},"jsx-a11y/no-redundant-roles","The element ul has an implicit role of list. Defining this explicitly is redundant and should be avoided.","JSXOpeningElement"]